# ===================================================================
# COMMON SPRING BOOT PROPERTIES
#
# This sample file is provided as a guideline. Do NOT copy it in its
# entirety to your own application.               ^^^
# ===================================================================


# ----------------------------------------
# CORE PROPERTIES
# ----------------------------------------

# BANNER
banner.charset=UTF-8 # Banner file encoding.
banner.location=classpath:banner.txt # Banner file location.

# LOGGING
logging.config= # Location of the logging configuration file. For instance `classpath:logback.xml` for Logback
logging.exception-conversion-word=%wEx # Conversion word used when logging exceptions.
logging.file= # Log file name. For instance `myapp.log`
logging.level.*= # Log levels severity mapping. For instance `logging.level.org.springframework=DEBUG`
logging.path= # Location of the log file. For instance `/var/log`
logging.pattern.console= # Appender pattern for output to the console. Only supported with the default logback setup.
logging.pattern.file= # Appender pattern for output to the file. Only supported with the default logback setup.
logging.pattern.level= # Appender pattern for log level (default %5p). Only supported with the default logback setup.
# Register a shutdown hook for the logging system when it is initialized.
logging.register-shutdown-hook=false

# AOP
# Add @EnableAspectJAutoProxy.
spring.aop.auto=true
# Whether subclass-based (CGLIB) proxies are to be created (true) as opposed to standard Java interface-based proxies (false).
spring.aop.proxy-target-class=false

# IDENTITY (ContextIdApplicationContextInitializer)
# Application index.
spring.application.index= 111
spring.application.name= # Application name.

# ADMIN (SpringApplicationAdminJmxAutoConfiguration)
# Enable admin features for the application.
spring.application.admin.enabled=false
spring.application.admin.jmx-name=org.springframework.boot:type=Admin,name=SpringApplication # JMX name of the application admin MBean.

# AUTO-CONFIGURATION
spring.autoconfigure.exclude= # Auto-configuration classes to exclude.

# SPRING CORE
# Skip search of BeanInfo classes.
spring.beaninfo.ignore=true

# SPRING CACHE (CacheProperties)
spring.cache.cache-names= # Comma-separated list of cache names to create if supported by the underlying cache manager.
spring.cache.ehcache.config= # The location of the configuration file to use to initialize EhCache.
spring.cache.guava.spec= # The spec to use to create caches. Check CacheBuilderSpec for more details on the spec format.
spring.cache.hazelcast.config= # The location of the configuration file to use to initialize Hazelcast.
spring.cache.infinispan.config= # The location of the configuration file to use to initialize Infinispan.
spring.cache.jcache.config= # The location of the configuration file to use to initialize the cache manager.
spring.cache.jcache.provider= # Fully qualified name of the CachingProvider implementation to use to retrieve the JSR-107 compliant cache manager. Only needed if more than one JSR-107 implementation is available on the classpath.
# Cache type, auto-detected according to the environment by default.
spring.cache.type= EHCACHE

# SPRING CONFIG - using environment property only (ConfigFileApplicationListener)
spring.config.location= # Config file locations.
spring.config.name=application # Config file name.

# HAZELCAST (HazelcastProperties)
spring.hazelcast.config= # The location of the configuration file to use to initialize Hazelcast.

# JMX
spring.jmx.default-domain= # JMX domain name.
# Expose management beans to the JMX domain.
spring.jmx.enabled=true
spring.jmx.server=mbeanServer # MBeanServer bean name.

# Email (MailProperties)
spring.mail.default-encoding=UTF-8 # Default MimeMessage encoding.
spring.mail.host= # SMTP server host. For instance `smtp.example.com`
spring.mail.jndi-name= # Session JNDI name. When set, takes precedence to others mail settings.
spring.mail.password= # Login password of the SMTP server.
# SMTP server port.
spring.mail.port= 111
spring.mail.properties.*= # Additional JavaMail session properties.
spring.mail.protocol=smtp # Protocol used by the SMTP server.
# Test that the mail server is available on startup.
spring.mail.test-connection=false
spring.mail.username= # Login user of the SMTP server.

# APPLICATION SETTINGS (SpringApplication)
# Mode used to display the banner when the application runs.
spring.main.banner-mode=console
spring.main.sources= # Sources (class name, package name or XML resource location) to include in the ApplicationContext.
# Run the application in a web environment (auto-detected by default).
spring.main.web-environment= true

# FILE ENCODING (FileEncodingApplicationListener)
spring.mandatory-file-encoding= # Expected character encoding the application must use.

# INTERNATIONALIZATION (MessageSourceAutoConfiguration)
spring.messages.basename=messages # Comma-separated list of basenames, each following the ResourceBundle convention.
# Loaded resource bundle files cache expiration, in seconds. When set to -1, bundles are cached forever.
spring.messages.cache-seconds=-1
spring.messages.encoding=UTF-8 # Message bundles encoding.
# Set whether to fall back to the system Locale if no files for a specific Locale have been found.
spring.messages.fallback-to-system-locale=true

# OUTPUT
# Configure the ANSI output (can be "detect", "always", "never").
spring.output.ansi.enabled=detect

# PID FILE (ApplicationPidFileWriter)
spring.pid.fail-on-write-error= # Fail if ApplicationPidFileWriter is used but it cannot write the PID file.
spring.pid.file= # Location of the PID file to write (if ApplicationPidFileWriter is used).

# PROFILES
spring.profiles.active= # Comma-separated list of active profiles.
spring.profiles.include= # Unconditionally activate the specified comma separated profiles.

# SENDGRID (SendGridAutoConfiguration)
spring.sendgrid.username= # SendGrid account username
spring.sendgrid.password= # SendGrid account password
spring.sendgrid.proxy.host= # SendGrid proxy host
# SendGrid proxy port
spring.sendgrid.proxy.port= 111


# ----------------------------------------
# WEB PROPERTIES
# ----------------------------------------

# MULTIPART (MultipartProperties)
# Enable support of multi-part uploads.
multipart.enabled=true
multipart.file-size-threshold=0 # Threshold after which files will be written to disk. Values can use the suffixed "MB" or "KB" to indicate a Megabyte or Kilobyte size.
multipart.location= # Intermediate location of uploaded files.
multipart.max-file-size=1Mb # Max file size. Values can use the suffixed "MB" or "KB" to indicate a Megabyte or Kilobyte size.
multipart.max-request-size=10Mb # Max request size. Values can use the suffixed "MB" or "KB" to indicate a Megabyte or Kilobyte size.

# EMBEDDED SERVER CONFIGURATION (ServerProperties)
server.address= # Network address to which the server should bind to.
# If response compression is enabled.
server.compression.enabled=false
server.compression.excluded-user-agents= # List of user-agents to exclude from compression.
server.compression.mime-types= # Comma-separated list of MIME types that should be compressed. For instance `text/html,text/css,application/json`
# Minimum response size that is required for compression to be performed. For instance 2048
server.compression.min-response-size= 1000
server.context-parameters.*= # Servlet context init parameters. For instance `server.context-parameters.a=alpha`
server.context-path= # Context path of the application.
server.display-name=application # Display name of the application.
# When to include a "stacktrace" attribute.
server.error.include-stacktrace=never
server.error.path=/error # Path of the error controller.
# Enable the default error page displayed in browsers in case of a server error.
server.error.whitelabel.enabled=true
server.jsp-servlet.class-name=org.apache.jasper.servlet.JspServlet # The class name of the JSP servlet.
server.jsp-servlet.init-parameters.*= # Init parameters used to configure the JSP servlet
# Whether or not the JSP servlet is registered
server.jsp-servlet.registered=true
# Server HTTP port.
server.port=8080
server.server-header= # The value sent in the server response header (uses servlet container default if empty)
server.servlet-path=/ # Path of the main dispatcher servlet.
server.session.cookie.comment= # Comment for the session cookie.
server.session.cookie.domain= # Domain for the session cookie.
# "HttpOnly" flag for the session cookie.
server.session.cookie.http-only= true
# Maximum age of the session cookie in seconds.
server.session.cookie.max-age= 1000
server.session.cookie.name= # Session cookie name.
server.session.cookie.path= # Path of the session cookie.
# "Secure" flag for the session cookie.
server.session.cookie.secure= true
# Persist session data between restarts.
server.session.persistent=false
server.session.store-dir= # Directory used to store session data.
# Session timeout in seconds.
server.session.timeout= 300
server.session.tracking-modes= # Session tracking modes (one or more of the following: "cookie", "url", "ssl").
server.ssl.ciphers= # Supported SSL ciphers.
# Whether client authentication is wanted ("want") or needed ("need"). Requires a trust store.
server.ssl.client-auth= need
server.ssl.enabled= true
server.ssl.key-alias= #
server.ssl.key-password= #
server.ssl.key-store= #
server.ssl.key-store-password= #
server.ssl.key-store-provider= #
server.ssl.key-store-type= #
server.ssl.protocol= #
server.ssl.trust-store= #
server.ssl.trust-store-password= #
server.ssl.trust-store-provider= #
server.ssl.trust-store-type= #
server.tomcat.accesslog.directory=logs # Directory in which log files are created. Can be relative to the tomcat base dir or absolute.
# Enable access log.
server.tomcat.accesslog.enabled=false
server.tomcat.accesslog.pattern=common # Format pattern for access logs.
server.tomcat.accesslog.prefix=access_log # Log file name prefix.
server.tomcat.accesslog.suffix=.log # Log file name suffix.
# Delay in seconds between the invocation of backgroundProcess methods.
server.tomcat.background-processor-delay=30
server.tomcat.basedir= # Tomcat base directory. If not specified a temporary directory will be used.
server.tomcat.internal-proxies=10\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}|\\
        192\\.168\\.\\d{1,3}\\.\\d{1,3}|\\
        169\\.254\\.\\d{1,3}\\.\\d{1,3}|\\
        127\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}|\\
        172\\.1[6-9]{1}\\.\\d{1,3}\\.\\d{1,3}|\\
        172\\.2[0-9]{1}\\.\\d{1,3}\\.\\d{1,3}|\\
        172\\.3[0-1]{1}\\.\\d{1,3}\\.\\d{1,3} # regular expression matching trusted IP addresses.
# Maximum size in bytes of the HTTP message header.
server.tomcat.max-http-header-size=0
# Maximum amount of worker threads.
server.tomcat.max-threads=0
server.tomcat.port-header=X-Forwarded-Port # Name of the HTTP header used to override the original port value.
server.tomcat.protocol-header= # Header that holds the incoming protocol, usually named "X-Forwarded-Proto".
server.tomcat.protocol-header-https-value=https # Value of the protocol header that indicates that the incoming request uses SSL.
server.tomcat.remote-ip-header= # Name of the http header from which the remote ip is extracted. For instance `X-FORWARDED-FOR`
server.tomcat.uri-encoding=UTF-8 # Character encoding to use to decode the URI.
server.undertow.accesslog.dir= # Undertow access log directory.
# Enable access log.
server.undertow.accesslog.enabled=false
# Format pattern for access logs.
server.undertow.accesslog.pattern=common
# Size of each buffer in bytes.
server.undertow.buffer-size= 111
# Number of buffer per region.
server.undertow.buffers-per-region= 111
# Allocate buffers outside the Java heap.
server.undertow.direct-buffers= true
# Number of I/O threads to create for the worker.
server.undertow.io-threads= 1111
# Number of worker threads.
server.undertow.worker-threads= 111
# If X-Forwarded-* headers should be applied to the HttpRequest.
server.use-forward-headers= true

# FREEMARKER (FreeMarkerAutoConfiguration)
# Set whether HttpServletRequest attributes are allowed to override (hide) controller generated model attributes of the same name.
spring.freemarker.allow-request-override=false
# Set whether HttpSession attributes are allowed to override (hide) controller generated model attributes of the same name.
spring.freemarker.allow-session-override=false
# Enable template caching.
spring.freemarker.cache=false
# Template encoding.
spring.freemarker.charset=UTF-8
# Check that the templates location exists.
spring.freemarker.check-template-location=true
# Content-Type value.
spring.freemarker.content-type=text/html
# Enable MVC view resolution for this technology.
spring.freemarker.enabled=true
# Set whether all request attributes should be added to the model prior to merging with the template.
spring.freemarker.expose-request-attributes=false
# Set whether all HttpSession attributes should be added to the model prior to merging with the template.
spring.freemarker.expose-session-attributes=false
# Set whether to expose a RequestContext for use by Spring's macro library, under the name "springMacroRequestContext".
spring.freemarker.expose-spring-macro-helpers=true
# Prefer file system access for template loading. File system access enables hot detection of template changes.
spring.freemarker.prefer-file-system-access=true
spring.freemarker.prefix= # Prefix that gets prepended to view names when building a URL.
spring.freemarker.request-context-attribute= # Name of the RequestContext attribute for all views.
spring.freemarker.settings.*= # Well-known FreeMarker keys which will be passed to FreeMarker's Configuration.
spring.freemarker.suffix= # Suffix that gets appended to view names when building a URL.
spring.freemarker.template-loader-path=classpath:/templates/ # Comma-separated list of template paths.
spring.freemarker.view-names= # White list of view names that can be resolved.

# GROOVY TEMPLATES (GroovyTemplateAutoConfiguration)
# Set whether HttpServletRequest attributes are allowed to override (hide) controller generated model attributes of the same name.
spring.groovy.template.allow-request-override=false
# Set whether HttpSession attributes are allowed to override (hide) controller generated model attributes of the same name.
spring.groovy.template.allow-session-override=false
# Enable template caching.
spring.groovy.template.cache= true
# Template encoding.
spring.groovy.template.charset=UTF-8 
# Check that the templates location exists.
spring.groovy.template.check-template-location=true
spring.groovy.template.configuration.*= # See GroovyMarkupConfigurer
spring.groovy.template.content-type=test/html # Content-Type value.
# Enable MVC view resolution for this technology.
spring.groovy.template.enabled=true
# Set whether all request attributes should be added to the model prior to merging with the template.
spring.groovy.template.expose-request-attributes=false
# Set whether all HttpSession attributes should be added to the model prior to merging with the template.
spring.groovy.template.expose-session-attributes=false
# Set whether to expose a RequestContext for use by Spring's macro library, under the name "springMacroRequestContext".
spring.groovy.template.expose-spring-macro-helpers=true
spring.groovy.template.prefix= # Prefix that gets prepended to view names when building a URL.
spring.groovy.template.request-context-attribute= # Name of the RequestContext attribute for all views.
spring.groovy.template.resource-loader-path=classpath:/templates/ # Template path.
spring.groovy.template.suffix=.tpl # Suffix that gets appended to view names when building a URL.
spring.groovy.template.view-names= # White list of view names that can be resolved.

# SPRING HATEOAS (HateoasProperties)
# Specify if application/hal+json responses should be sent to requests that accept application/json.
spring.hateoas.use-hal-as-default-json-media-type=true

# HTTP message conversion
spring.http.converters.preferred-json-mapper=jackson # Preferred JSON mapper to use for HTTP message conversion. Set to "gson" to force the use of Gson when both it and Jackson are on the classpath.

# HTTP encoding (HttpEncodingProperties)
# Charset of HTTP requests and responses. Added to the "Content-Type" header if not set explicitly.
spring.http.encoding.charset=UTF-8
# Enable http encoding support.
spring.http.encoding.enabled=true
# Force the encoding to the configured charset on HTTP requests and responses.
spring.http.encoding.force=true

# JACKSON (JacksonProperties)
spring.jackson.date-format= # Date format string or a fully-qualified date format class name. For instance `yyyy-MM-dd HH:mm:ss`.
#spring.jackson.deserialization.*= # Jackson on/off features that affect the way Java objects are deserialized.
#spring.jackson.generator.*= # Jackson on/off features for generators.
spring.jackson.joda-date-time-format= # Joda date time format string. If not configured, "date-format" will be used as a fallback if it is configured with a format string.
spring.jackson.locale= # Locale used for formatting.
#spring.jackson.mapper.*= # Jackson general purpose on/off features.
#spring.jackson.parser.*= # Jackson on/off features for parsers.
spring.jackson.property-naming-strategy= # One of the constants on Jackson's PropertyNamingStrategy. Can also be a fully-qualified class name of a PropertyNamingStrategy subclass.
#spring.jackson.serialization.*= # Jackson on/off features that affect the way Java objects are serialized.
#spring.jackson.serialization-inclusion= # Controls the inclusion of properties during serialization. Configured with one of the values in Jackson's JsonInclude.Include enumeration.
spring.jackson.time-zone= # Time zone used when formatting dates. For instance `America/Los_Angeles`

# JERSEY (JerseyProperties)
spring.jersey.application-path= # Path that serves as the base URI for the application. Overrides the value of "@ApplicationPath" if specified.
# Jersey filter chain order.
spring.jersey.filter.order=0 
spring.jersey.init.*= # Init parameters to pass to Jersey via the servlet or filter.
servlet # Jersey integration type. Can be either "servlet" or "filter".
spring.jersey.type=SERVLET

# SPRING MOBILE DEVICE VIEWS (DeviceDelegatingViewResolverAutoConfiguration)
# Enable support for fallback resolution.
spring.mobile.devicedelegatingviewresolver.enable-fallback=false
# Enable device view resolver.
spring.mobile.devicedelegatingviewresolver.enabled=false
spring.mobile.devicedelegatingviewresolver.mobile-prefix=mobile/ # Prefix that gets prepended to view names for mobile devices.
spring.mobile.devicedelegatingviewresolver.mobile-suffix= # Suffix that gets appended to view names for mobile devices.
spring.mobile.devicedelegatingviewresolver.normal-prefix= # Prefix that gets prepended to view names for normal devices.
spring.mobile.devicedelegatingviewresolver.normal-suffix= # Suffix that gets appended to view names for normal devices.
spring.mobile.devicedelegatingviewresolver.tablet-prefix=tablet/ # Prefix that gets prepended to view names for tablet devices.
spring.mobile.devicedelegatingviewresolver.tablet-suffix= # Suffix that gets appended to view names for tablet devices.

# SPRING MOBILE SITE PREFERENCE (SitePreferenceAutoConfiguration)
# Enable SitePreferenceHandler.
spring.mobile.sitepreference.enabled=true

# MUSTACHE TEMPLATES (MustacheAutoConfiguration)
# Enable template caching.
spring.mustache.cache=false
spring.mustache.charset=UTF-8 # Template encoding.
# Check that the templates location exists.
spring.mustache.check-template-location=true
spring.mustache.content-type=text/html # Content-Type value.
# Enable MVC view resolution for this technology.
spring.mustache.enabled=true
spring.mustache.prefix=classpath:/templates/ # Prefix to apply to template names.
spring.mustache.suffix=.html # Suffix to apply to template names.
spring.mustache.view-names= # White list of view names that can be resolved.

# SPRING MVC (WebMvcProperties)
# Amount of time (in milliseconds) before asynchronous request handling times out.
spring.mvc.async.request-timeout= 10000
spring.mvc.date-format= # Date format to use. For instance `dd/MM/yyyy`.
# Dispatch TRACE requests to the FrameworkServlet doService method.
spring.mvc.dispatch-trace-request=false
# Dispatch OPTIONS requests to the FrameworkServlet doService method.
spring.mvc.dispatch-options-request=false 
# Enable resolution of favicon.ico.
spring.mvc.favicon.enabled=true
# If the content of the "default" model should be ignored during redirect scenarios.
spring.mvc.ignore-default-model-on-redirect=true
spring.mvc.locale= # Locale to use.
spring.mvc.media-types.*= # Maps file extensions to media types for content negotiation.
# Formatting strategy for message codes. For instance `PREFIX_ERROR_CODE`.
spring.mvc.message-codes-resolver-format= PREFIX_ERROR_CODE
spring.mvc.static-path-pattern=/** # Path pattern used for static resources.
# If a "NoHandlerFoundException" should be thrown if no Handler was found to process a request.
spring.mvc.throw-exception-if-no-handler-found=false
spring.mvc.view.prefix= # Spring MVC view prefix.
spring.mvc.view.suffix= # Spring MVC view suffix.

# SPRING RESOURCES HANDLING (ResourceProperties)
# Enable default resource handling.
spring.resources.add-mappings=true
# Cache period for the resources served by the resource handler, in seconds.
spring.resources.cache-period= 111
# Enable caching in the Resource chain.
spring.resources.chain.cache=true
# Enable the Spring Resource Handling chain. Disabled by default unless at least one strategy has been enabled.
spring.resources.chain.enabled= true
# Enable HTML5 application cache manifest rewriting.
spring.resources.chain.html-application-cache=false
# Enable the content Version Strategy.
spring.resources.chain.strategy.content.enabled=false
# Comma-separated list of patterns to apply to the Version Strategy.
spring.resources.chain.strategy.content.paths=/**
# Enable the fixed Version Strategy.
spring.resources.chain.strategy.fixed.enabled=false
spring.resources.chain.strategy.fixed.paths= # Comma-separated list of patterns to apply to the Version Strategy.
spring.resources.chain.strategy.fixed.version= # Version string to use for the Version Strategy.
spring.resources.static-locations=classpath:/META-INF/resources/,classpath:/resources/,classpath:/static/,classpath:/public/ # Locations of static resources.

# SPRING SOCIAL (SocialWebAutoConfiguration)
# Enable the connection status view for supported providers.
spring.social.auto-connection-views=false

# SPRING SOCIAL FACEBOOK (FacebookAutoConfiguration)
spring.social.facebook.app-id= # your application's Facebook App ID
spring.social.facebook.app-secret= # your application's Facebook App Secret

# SPRING SOCIAL LINKEDIN (LinkedInAutoConfiguration)
spring.social.linkedin.app-id= # your application's LinkedIn App ID
spring.social.linkedin.app-secret= # your application's LinkedIn App Secret

# SPRING SOCIAL TWITTER (TwitterAutoConfiguration)
spring.social.twitter.app-id= # your application's Twitter App ID
spring.social.twitter.app-secret= # your application's Twitter App Secret

# THYMELEAF (ThymeleafAutoConfiguration)
# Enable template caching.
spring.thymeleaf.cache=true
# Check that the templates location exists.
spring.thymeleaf.check-template-location=true
# Content-Type value.
spring.thymeleaf.content-type=text/html
# Enable MVC Thymeleaf view resolution.
spring.thymeleaf.enabled=true
# Template encoding.
spring.thymeleaf.encoding=UTF-8
spring.thymeleaf.excluded-view-names= # Comma-separated list of view names that should be excluded from resolution.
spring.thymeleaf.mode=HTML5 # Template mode to be applied to templates. See also StandardTemplateModeHandlers.
spring.thymeleaf.prefix=classpath:/templates/ # Prefix that gets prepended to view names when building a URL.
# Suffix that gets appended to view names when building a URL.
spring.thymeleaf.suffix=.html
# Order of the template resolver in the chain.
spring.thymeleaf.template-resolver-order= 111
spring.thymeleaf.view-names= # Comma-separated list of view names that can be resolved.

# VELOCITY TEMPLATES (VelocityAutoConfiguration)
# Set whether HttpServletRequest attributes are allowed to override (hide) controller generated model attributes of the same name.
spring.velocity.allow-request-override=false
# Set whether HttpSession attributes are allowed to override (hide) controller generated model attributes of the same name.
spring.velocity.allow-session-override=false
# Enable template caching.
spring.velocity.cache= true
# Template encoding.
spring.velocity.charset=UTF-8
# Check that the templates location exists.
spring.velocity.check-template-location=true
spring.velocity.content-type=text/html # Content-Type value.
spring.velocity.date-tool-attribute= # Name of the DateTool helper object to expose in the Velocity context of the view.
# Enable MVC view resolution for this technology.
spring.velocity.enabled=true
# Set whether all request attributes should be added to the model prior to merging with the template.
spring.velocity.expose-request-attributes=false
# Set whether all HttpSession attributes should be added to the model prior to merging with the template.
spring.velocity.expose-session-attributes=false
# Set whether to expose a RequestContext for use by Spring's macro library, under the name "springMacroRequestContext".
spring.velocity.expose-spring-macro-helpers=true
spring.velocity.number-tool-attribute= # Name of the NumberTool helper object to expose in the Velocity context of the view.
# Prefer file system access for template loading. File system access enables hot detection of template changes.
spring.velocity.prefer-file-system-access=true
spring.velocity.prefix= # Prefix that gets prepended to view names when building a URL.
spring.velocity.properties.*= # Additional velocity properties.
spring.velocity.request-context-attribute= # Name of the RequestContext attribute for all views.
spring.velocity.resource-loader-path=classpath:/templates/ # Template path.
spring.velocity.suffix=.vm # Suffix that gets appended to view names when building a URL.
spring.velocity.toolbox-config-location= # Velocity Toolbox config location. For instance `/WEB-INF/toolbox.xml`
spring.velocity.view-names= # White list of view names that can be resolved.



# ----------------------------------------
# SECURITY PROPERTIES
# ----------------------------------------
# SECURITY (SecurityProperties)
# Security authorize mode to apply.
security.basic.authorize-mode=role
# Enable basic authentication.
security.basic.enabled=true
security.basic.path=/** # Comma-separated list of paths to secure.
security.basic.realm=Spring # HTTP basic realm name.
# Enable Cross Site Request Forgery support.
security.enable-csrf=false
# Security filter chain order.
security.filter-order=0
security.filter-dispatcher-types=ASYNC, FORWARD, INCLUDE, REQUEST # Security filter chain dispatcher types.
# Enable cache control HTTP headers.
security.headers.cache=true
# Enable "X-Content-Type-Options" header.
security.headers.content-type=true
# Enable "X-Frame-Options" header.
security.headers.frame=true
# HTTP Strict Transport Security (HSTS) mode (none, domain, all).
security.headers.hsts= DOMAIN
# Enable cross site scripting (XSS) protection.
security.headers.xss=true
security.ignored= # Comma-separated list of paths to exclude from the default secured paths.
# Enable secure channel for all requests.
security.require-ssl=false
security.sessions=stateless # Session creation policy (always, never, if_required, stateless).
security.user.name=user # Default user name.
security.user.password= # Password for the default user name. A random password is logged on startup by default.
security.user.role=USER # Granted roles for the default user name.

# SECURITY OAUTH2 CLIENT (OAuth2ClientProperties
security.oauth2.client.client-id= # OAuth2 client id.
security.oauth2.client.client-secret= # OAuth2 client secret. A random secret is generated by default

# SECURITY OAUTH2 RESOURCES (ResourceServerProperties
security.oauth2.resource.id= # Identifier of the resource.
security.oauth2.resource.jwt.key-uri= # The URI of the JWT token. Can be set if the value is not available and the key is public.
security.oauth2.resource.jwt.key-value= # The verification key of the JWT token. Can either be a symmetric secret or PEM-encoded RSA public key.
# Use the token info, can be set to false to use the user info.
security.oauth2.resource.prefer-token-info=true
security.oauth2.resource.service-id=resource #
security.oauth2.resource.token-info-uri= # URI of the token decoding endpoint.
security.oauth2.resource.token-type= # The token type to send when using the userInfoUri.
security.oauth2.resource.user-info-uri= # URI of the user endpoint.

# SECURITY OAUTH2 SSO (OAuth2SsoProperties
# Filter order to apply if not providing an explicit WebSecurityConfigurerAdapter
security.oauth2.sso.filter-order= 11
security.oauth2.sso.login-path=/login # Path to the login page, i.e. the one that triggers the redirect to the OAuth2 Authorization Server


# ----------------------------------------
# DATA PROPERTIES
# ----------------------------------------

# FLYWAY (FlywayProperties)
flyway.baseline-description= #
flyway.baseline-version=1 # version to start migration
flyway.baseline-on-migrate= false
# Check that migration scripts location exists.
flyway.check-location=false
flyway.clean-on-validation-error= false
# Enable flyway.
flyway.enabled=true
flyway.encoding= #
flyway.ignore-failed-future-migration= false
flyway.init-sqls= # SQL statements to execute to initialize a connection immediately after obtaining it.
flyway.locations=classpath:db/migration # locations of migrations scripts
flyway.out-of-order= false
flyway.password= # JDBC password if you want Flyway to create its own DataSource
flyway.placeholder-prefix= #
flyway.placeholder-replacement= false
flyway.placeholder-suffix= #
flyway.placeholders.*= #
flyway.schemas= # schemas to update
flyway.sql-migration-prefix=V #
flyway.sql-migration-separator= #
flyway.sql-migration-suffix=.sql #
flyway.table= #
flyway.url= # JDBC url of the database to migrate. If not set, the primary configured data source is used.
flyway.user= # Login user of the database to migrate.
flyway.validate-on-migrate= false

# LIQUIBASE (LiquibaseProperties)
liquibase.change-log=classpath:/db/changelog/db.changelog-master.yaml # Change log configuration path.
# Check the change log location exists.
liquibase.check-change-log-location=true
liquibase.contexts= # Comma-separated list of runtime contexts to use.
liquibase.default-schema= # Default database schema.
# Drop the database schema first.
liquibase.drop-first=false
# Enable liquibase support.
liquibase.enabled=true
liquibase.labels= # Comma-separated list of runtime labels to use.
liquibase.parameters.*= # Change log parameters.
liquibase.password= # Login password of the database to migrate.
liquibase.url= # JDBC url of the database to migrate. If not set, the primary configured data source is used.
liquibase.user= # Login user of the database to migrate.

# DAO (PersistenceExceptionTranslationAutoConfiguration)
# Enable the PersistenceExceptionTranslationPostProcessor.
spring.dao.exceptiontranslation.enabled=true

# CASSANDRA (CassandraProperties)
spring.data.cassandra.cluster-name= # Name of the Cassandra cluster.
spring.data.cassandra.compression= # Compression supported by the Cassandra binary protocol.
# Socket option: connection time out.
spring.data.cassandra.connect-timeout-millis= 1000
spring.data.cassandra.consistency-level= # Queries consistency level.
spring.data.cassandra.contact-points=localhost # Comma-separated list of cluster node addresses.
# Queries default fetch size.
spring.data.cassandra.fetch-size= 111
spring.data.cassandra.keyspace-name= # Keyspace name to use.
spring.data.cassandra.load-balancing-policy= # Class name of the load balancing policy.
# Port of the Cassandra server.
spring.data.cassandra.port= 111
spring.data.cassandra.password= # Login password of the server.
# Socket option: read time out.
spring.data.cassandra.read-timeout-millis= 1000
spring.data.cassandra.reconnection-policy= # Reconnection policy class.
spring.data.cassandra.retry-policy= # Class name of the retry policy.
spring.data.cassandra.serial-consistency-level= # Queries serial consistency level.
# Enable SSL support.
spring.data.cassandra.ssl=false
spring.data.cassandra.username= # Login user of the server.

# ELASTICSEARCH (ElasticsearchProperties)
spring.data.elasticsearch.cluster-name=elasticsearch # Elasticsearch cluster name.
spring.data.elasticsearch.cluster-nodes= # Comma-separated list of cluster node addresses. If not specified, starts a client node.
spring.data.elasticsearch.properties.*= # Additional properties used to configure the client.
# Enable Elasticsearch repositories.
spring.data.elasticsearch.repositories.enabled=true

# MONGODB (MongoProperties)
spring.data.mongodb.authentication-database= # Authentication database name.
spring.data.mongodb.database=test # Database name.
spring.data.mongodb.field-naming-strategy= # Fully qualified name of the FieldNamingStrategy to use.
spring.data.mongodb.grid-fs-database= # GridFS database name.
spring.data.mongodb.host=localhost # Mongo server host.
spring.data.mongodb.password= # Login password of the mongo server.
# Mongo server port.
spring.data.mongodb.port=27017
# Enable Mongo repositories.
spring.data.mongodb.repositories.enabled=true
spring.data.mongodb.uri=mongodb://localhost/test # Mongo database URI. When set, host and port are ignored.
spring.data.mongodb.username= # Login user of the mongo server.

# DATA REST (RepositoryRestProperties)
spring.data.rest.base-path= # Base path to be used by Spring Data REST to expose repository resources.
# Default size of pages.
spring.data.rest.default-page-size= 111
# Enable enum value translation via the Spring Data REST default resource bundle.
spring.data.rest.enable-enum-translation= false
spring.data.rest.limit-param-name= # Name of the URL query string parameter that indicates how many results to return at once.
# Maximum size of pages.
spring.data.rest.max-page-size= 1111
spring.data.rest.page-param-name= # Name of the URL query string parameter that indicates what page to return.
# Return a response body after creating an entity.
spring.data.rest.return-body-on-create= false
# Return a response body after updating an entity.
spring.data.rest.return-body-on-update= false
spring.data.rest.sort-param-name= # Name of the URL query string parameter that indicates what direction to sort results.

# SOLR (SolrProperties)
spring.data.solr.host=http://127.0.0.1:8983/solr # Solr host. Ignored if "zk-host" is set.
# Enable Solr repositories.
spring.data.solr.repositories.enabled=true
spring.data.solr.zk-host= # ZooKeeper host address in the form HOST:PORT.

# DATASOURCE (DataSourceAutoConfiguration & DataSourceProperties)
# Do not stop if an error occurs while initializing the database.
spring.datasource.continue-on-error=false
spring.datasource.data= # Data (DML) script resource reference.
spring.datasource.driver-class-name= # Fully qualified name of the JDBC driver. Auto-detected based on the URL by default.
# Populate the database using 'data.sql'.
spring.datasource.initialize=true
# Enable JMX support (if provided by the underlying pool).
spring.datasource.jmx-enabled=false
spring.datasource.jndi-name= # JNDI location of the datasource. Class, url, username & password are ignored when set.
# For instance 100
spring.datasource.max-active= 100
# For instance 8
spring.datasource.max-idle= 8
spring.datasource.max-wait=11
spring.datasource.min-evictable-idle-time-millis=11111
spring.datasource.min-idle=8
spring.datasource.name=testdb # Name of the datasource.
spring.datasource.password= # Login password of the database.
spring.datasource.platform=all # Platform to use in the schema resource (schema-${platform}.sql).
spring.datasource.schema= # Schema (DDL) script resource reference.
spring.datasource.separator=; # Statement separator in SQL initialization scripts.
spring.datasource.sql-script-encoding= # SQL scripts encoding.
# For instance `false`
spring.datasource.test-on-borrow=false
# For instance `false`
spring.datasource.test-on-return= false
spring.datasource.test-while-idle= false
spring.datasource.time-between-eviction-runs-millis= 1
spring.datasource.type= # Fully qualified name of the connection pool implementation to use. By default, it is auto-detected from the classpath.
spring.datasource.url= # JDBC url of the database.
spring.datasource.username=
spring.datasource.validation-query=

# H2 Web Console (H2ConsoleProperties)
# Enable the console.
spring.h2.console.enabled=false
# Path at which the console will be available.
spring.h2.console.path=/h2-console

# JOOQ (JooqAutoConfiguration)
spring.jooq.sql-dialect= # SQLDialect JOOQ used when communicating with the configured datasource. For instance `POSTGRES`

# JPA (JpaBaseConfiguration, HibernateJpaAutoConfiguration)
# Enable JPA repositories.
spring.data.jpa.repositories.enabled=true
# Target database to operate on, auto-detected by default. Can be alternatively set using the "databasePlatform" property.
spring.jpa.database= MYSQL
spring.jpa.database-platform= # Name of the target database to operate on, auto-detected by default. Can be alternatively set using the "Database" enum.
# Initialize the schema on startup.
spring.jpa.generate-ddl=false
spring.jpa.hibernate.ddl-auto= # DDL mode. This is actually a shortcut for the "hibernate.hbm2ddl.auto" property. Default to "create-drop" when using an embedded database, "none" otherwise.
spring.jpa.hibernate.naming-strategy= # Naming strategy fully qualified name.
# Register OpenEntityManagerInViewInterceptor. Binds a JPA EntityManager to the thread for the entire processing of the request.
spring.jpa.open-in-view=true
spring.jpa.properties.*= # Additional native properties to set on the JPA provider.
# Enable logging of SQL statements.
spring.jpa.show-sql=false

# JTA (JtaAutoConfiguration)
spring.jta.log-dir= # Transaction logs directory.

# ATOMIKOS
# Interval between checkpoints.
spring.jta.checkpoint-interval=500
spring.jta.console-file-count=1 # Number of debug logs files that can be created.
spring.jta.console-file-limit=-1 # How many bytes can be stored at most in debug logs files.
spring.jta.console-file-name=tm.out # Debug logs file name.
spring.jta.console-log-level= # Console log level.
spring.jta.default-jta-timeout=10000 # Default timeout for JTA transactions.
spring.jta.enable-logging=true # Enable disk logging.
spring.jta.force-shutdown-on-vm-exit=false # Specify if a VM shutdown should trigger forced shutdown of the transaction core.
spring.jta.log-base-dir= # Directory in which the log files should be stored.
spring.jta.log-base-name=tmlog # Transactions log file base name.
spring.jta.max-actives=50 # Maximum number of active transactions.
spring.jta.max-timeout=300000 # Maximum timeout (in milliseconds) that can be allowed for transactions.
spring.jta.output-dir= # Directory in which to store the debug log files.
spring.jta.serial-jta-transactions=true # Specify if sub-transactions should be joined when possible.
spring.jta.service= # Transaction manager implementation that should be started.
spring.jta.threaded-two-phase-commit=true # Use different (and concurrent) threads for two-phase commit on the participating resources.
spring.jta.transaction-manager-unique-name= # Transaction manager's unique name.
# Timeout, in seconds, for borrowing connections from the pool.
spring.jta.atomikos.connectionfactory.borrow-connection-timeout=30
# Whether or not to ignore the transacted flag when creating session.
spring.jta.atomikos.connectionfactory.ignore-session-transacted-flag=true
# Whether or not local transactions are desired.
spring.jta.atomikos.connectionfactory.local-transaction-mode=false
# The time, in seconds, between runs of the pool's maintenance thread.
spring.jta.atomikos.connectionfactory.maintenance-interval=60
# The time, in seconds, after which connections are cleaned up from the pool.
spring.jta.atomikos.connectionfactory.max-idle-time=60
# The time, in seconds, that a connection can be pooled for before being destroyed. 0 denotes no limit.
spring.jta.atomikos.connectionfactory.max-lifetime=0
# The maximum size of the pool.
spring.jta.atomikos.connectionfactory.max-pool-size=1
# The minimum size of the pool.
spring.jta.atomikos.connectionfactory.min-pool-size=1
# The reap timeout, in seconds, for borrowed connections. 0 denotes no limit.
spring.jta.atomikos.connectionfactory.reap-timeout=0
spring.jta.atomikos.connectionfactory.unique-resource-name=jmsConnectionFactory # The unique name used to identify the resource during recovery.
# Timeout, in seconds, for borrowing connections from the pool.
spring.jta.atomikos.datasource.borrow-connection-timeout=30
# Default isolation level of connections provided by the pool.
spring.jta.atomikos.datasource.default-isolation-level= 1
# Timeout, in seconds, for establishing a database connection.
spring.jta.atomikos.datasource.login-timeout= 1000
# The time, in seconds, between runs of the pool's maintenance thread.
spring.jta.atomikos.datasource.maintenance-interval=60
# The time, in seconds, after which connections are cleaned up from the pool.
spring.jta.atomikos.datasource.max-idle-time=60
# The time, in seconds, that a connection can be pooled for before being destroyed. 0 denotes no limit.
spring.jta.atomikos.datasource.max-lifetime=0
# The maximum size of the pool.
spring.jta.atomikos.datasource.max-pool-size=1
# The minimum size of the pool.
spring.jta.atomikos.datasource.min-pool-size=1
# The reap timeout, in seconds, for borrowed connections. 0 denotes no limit.
spring.jta.atomikos.datasource.reap-timeout=0
spring.jta.atomikos.datasource.test-query= # SQL query or statement used to validate a connection before returning it.
spring.jta.atomikos.datasource.unique-resource-name=dataSource # The unique name used to identify the resource during recovery.

# BITRONIX
# Allow multiple LRC resources to be enlisted into the same transaction.
spring.jta.allow-multiple-lrc=false
# Enable asynchronously execution of two phase commit.
spring.jta.asynchronous2-pc=false
# Interval in seconds at which to run the recovery process in the background.
spring.jta.background-recovery-interval-seconds=60
# Recover only the current node.
spring.jta.current-node-only-recovery=true
# Log the creation and commit call stacks of transactions executed without a single enlisted resource.
spring.jta.debug-zero-resource-transaction=false
# Default transaction timeout in seconds.
spring.jta.default-transaction-timeout=60
# Enable JMX support.
spring.jta.disable-jmx=false
spring.jta.exception-analyzer= # Set the fully qualified name of the exception analyzer implementation to use.
# Enable filtering of logs so that only mandatory logs are written.
spring.jta.filter-log-status=false
#  Set if disk forces are batched.
spring.jta.force-batching-enabled=true
# Set if logs are forced to disk.
spring.jta.forced-write-enabled=true
# Maximum amount of seconds the TM will wait for transactions to get done before aborting them at shutdown time.
spring.jta.graceful-shutdown-interval=60
spring.jta.jndi-transaction-synchronization-registry-name= # JNDI name of the TransactionSynchronizationRegistry.
spring.jta.jndi-user-transaction-name= # JNDI name of the UserTransaction.
spring.jta.journal=disk # Name of the journal. Can be 'disk', 'null' or a class name.
spring.jta.log-part1-filename=btm1.tlog # Name of the first fragment of the journal.
spring.jta.log-part2-filename=btm2.tlog # Name of the second fragment of the journal.
# Maximum size in megabytes of the journal fragments.
spring.jta.max-log-size-in-mb=2
spring.jta.resource-configuration-filename= # ResourceLoader configuration file name.
spring.jta.server-id= # ASCII ID that must uniquely identify this TM instance. Default to the machine's IP address.
# Skip corrupted transactions log entries.
spring.jta.skip-corrupted-logs=false
# Log a warning for transactions executed without a single enlisted resource.
spring.jta.warn-about-zero-resource-transaction=true
# Number of connections to create when growing the pool.
spring.jta.bitronix.connectionfactory.acquire-increment=1
# Time, in seconds, to wait before trying to acquire a connection again after an invalid connection was acquired.
spring.jta.bitronix.connectionfactory.acquisition-interval=1
# Timeout, in seconds, for acquiring connections from the pool.
spring.jta.bitronix.connectionfactory.acquisition-timeout=30
# Whether or not the transaction manager should allow mixing XA and non-XA transactions.
spring.jta.bitronix.connectionfactory.allow-local-transactions=true
# Whether or not the transaction timeout should be set on the XAResource when it is enlisted.
spring.jta.bitronix.connectionfactory.apply-transaction-timeout=false
# Whether or not resources should be enlisted and delisted automatically.
spring.jta.bitronix.connectionfactory.automatic-enlisting-enabled=true
# Whether or not produces and consumers should be cached.
spring.jta.bitronix.connectionfactory.cache-producers-consumers=true
# Whether or not the provider can run many transactions on the same connection and supports transaction interleaving.
spring.jta.bitronix.connectionfactory.defer-connection-release=true
# Whether or not recovery failures should be ignored.
spring.jta.bitronix.connectionfactory.ignore-recovery-failures=false
# The time, in seconds, after which connections are cleaned up from the pool.
spring.jta.bitronix.connectionfactory.max-idle-time=60
# The maximum size of the pool. 0 denotes no limit.
spring.jta.bitronix.connectionfactory.max-pool-size=10
# The minimum size of the pool.
spring.jta.bitronix.connectionfactory.min-pool-size=0
spring.jta.bitronix.connectionfactory.password= # The password to use to connect to the JMS provider.
#  Whether or not connections in the ACCESSIBLE state can be shared within the context of a transaction.
spring.jta.bitronix.connectionfactory.share-transaction-connections=false
# Whether or not connections should be tested when acquired from the pool.
spring.jta.bitronix.connectionfactory.test-connections=true
# The position that this resource should take during two-phase commit (always first is Integer.MIN_VALUE, always last is Integer.MAX_VALUE).
spring.jta.bitronix.connectionfactory.two-pc-ordering-position=1
spring.jta.bitronix.connectionfactory.unique-name=jmsConnectionFactory # The unique name used to identify the resource during recovery.
#Whether or not TMJOIN should be used when starting XAResources.
spring.jta.bitronix.connectionfactory.use-tm-join=true
spring.jta.bitronix.connectionfactory.user= # The user to use to connect to the JMS provider.
# Number of connections to create when growing the pool.
spring.jta.bitronix.datasource.acquire-increment=1
# Time, in seconds, to wait before trying to acquire a connection again after an invalid connection was acquired.
spring.jta.bitronix.datasource.acquisition-interval=1
# Timeout, in seconds, for acquiring connections from the pool.
spring.jta.bitronix.datasource.acquisition-timeout=30
# Whether or not the transaction manager should allow mixing XA and non-XA transactions.
spring.jta.bitronix.datasource.allow-local-transactions=true
# Whether or not the transaction timeout should be set on the XAResource when it is enlisted.
spring.jta.bitronix.datasource.apply-transaction-timeout=false
# Whether or not resources should be enlisted and delisted automatically.
spring.jta.bitronix.datasource.automatic-enlisting-enabled=true
spring.jta.bitronix.datasource.cursor-holdability= # The default cursor holdability for connections.
# Whether or not the database can run many transactions on the same connection and supports transaction interleaving.
spring.jta.bitronix.datasource.defer-connection-release=true
# Whether or not Connection.isValid() is called when acquiring a connection from the pool.
spring.jta.bitronix.datasource.enable-jdbc4-connection-test= false
# Whether or not recovery failures should be ignored.
spring.jta.bitronix.datasource.ignore-recovery-failures=false
spring.jta.bitronix.datasource.isolation-level= # The default isolation level for connections.
spring.jta.bitronix.datasource.local-auto-commit= # The default auto-commit mode for local transactions.
# Timeout, in seconds, for establishing a database connection.
spring.jta.bitronix.datasource.login-timeout= 100
# The time, in seconds, after which connections are cleaned up from the pool.
spring.jta.bitronix.datasource.max-idle-time=60
# The maximum size of the pool. 0 denotes no limit.
spring.jta.bitronix.datasource.max-pool-size=10
# The minimum size of the pool.
spring.jta.bitronix.datasource.min-pool-size=0
# The target size of the prepared statement cache. 0 disables the cache.
spring.jta.bitronix.datasource.prepared-statement-cache-size=0
#  Whether or not connections in the ACCESSIBLE state can be shared within the context of a transaction.
spring.jta.bitronix.datasource.share-transaction-connections=false
spring.jta.bitronix.datasource.test-query= # SQL query or statement used to validate a connection before returning it.
# The position that this resource should take during two-phase commit (always first is Integer.MIN_VALUE, always last is Integer.MAX_VALUE).
spring.jta.bitronix.datasource.two-pc-ordering-position=1
spring.jta.bitronix.datasource.unique-name=dataSource # The unique name used to identify the resource during recovery.
#Whether or not TMJOIN should be used when starting XAResources.
spring.jta.bitronix.datasource.use-tm-join=true

# EMBEDDED MONGODB (EmbeddedMongoProperties)
spring.mongodb.embedded.features=SYNC_DELAY # Comma-separated list of features to enable.
spring.mongodb.embedded.version=2.6.10 # Version of Mongo to use.

# REDIS (RedisProperties)
# Database index used by the connection factory.
spring.redis.database=0
spring.redis.host=localhost # Redis server host.
spring.redis.password= # Login password of the redis server.
# Max number of connections that can be allocated by the pool at a given time. Use a negative value for no limit.
spring.redis.pool.max-active=8
# Max number of "idle" connections in the pool. Use a negative value to indicate an unlimited number of idle connections.
spring.redis.pool.max-idle=8
# Maximum amount of time (in milliseconds) a connection allocation should block before throwing an exception when the pool is exhausted. Use a negative value to block indefinitely.
spring.redis.pool.max-wait=-1
# Target for the minimum number of idle connections to maintain in the pool. This setting only has an effect if it is positive.
spring.redis.pool.min-idle=0
# Redis server port.
spring.redis.port=6379
spring.redis.sentinel.master= # Name of Redis server.
spring.redis.sentinel.nodes= # Comma-separated list of host:port pairs.
# Connection timeout in milliseconds.
spring.redis.timeout=0


# ----------------------------------------
# INTEGRATION PROPERTIES
# ----------------------------------------

# ACTIVEMQ (ActiveMQProperties)
spring.activemq.broker-url= # URL of the ActiveMQ broker. Auto-generated by default. For instance `tcp://localhost:61616`
# Specify if the default broker URL should be in memory. Ignored if an explicit broker has been specified.
spring.activemq.in-memory=true
spring.activemq.password= # Login password of the broker.
# Specify if a PooledConnectionFactory should be created instead of a regular ConnectionFactory.
spring.activemq.pooled=false
spring.activemq.user= # Login user of the broker.

# ARTEMIS (ArtemisProperties)
spring.artemis.embedded.cluster-password= # Cluster password. Randomly generated on startup by default.
spring.artemis.embedded.data-directory= # Journal file directory. Not necessary if persistence is turned off.
# Enable embedded mode if the Artemis server APIs are available.
spring.artemis.embedded.enabled=true
# Enable persistent store.
spring.artemis.embedded.persistent=false
spring.artemis.embedded.queues= # Comma-separated list of queues to create on startup.
# Server id. By default, an auto-incremented counter is used.
spring.artemis.embedded.server-id= 111
spring.artemis.embedded.topics= # Comma-separated list of topics to create on startup.
spring.artemis.host=localhost # Artemis broker host.
# Artemis deployment mode, auto-detected by default. Can be explicitly set to "native" or "embedded".
spring.artemis.mode= NATIVE
# Artemis broker port.
spring.artemis.port=61616

# SPRING BATCH (BatchProperties)
# Create the required batch tables on startup if necessary.
spring.batch.initializer.enabled=true
# Execute all Spring Batch jobs in the context on startup.
spring.batch.job.enabled=true
spring.batch.job.names= # Comma-separated list of job names to execute on startup (For instance `job1,job2`). By default, all Jobs found in the context are executed.
spring.batch.schema=classpath:org/springframework/batch/core/schema-@@platform@@.sql # Path to the SQL file to use to initialize the database schema.
spring.batch.table-prefix= # Table prefix for all the batch meta-data tables.

# HORNETQ (HornetQProperties)
spring.hornetq.embedded.cluster-password= # Cluster password. Randomly generated on startup by default.
spring.hornetq.embedded.data-directory= # Journal file directory. Not necessary if persistence is turned off.
# Enable embedded mode if the HornetQ server APIs are available.
spring.hornetq.embedded.enabled=true
# Enable persistent store.
spring.hornetq.embedded.persistent=false
spring.hornetq.embedded.queues= # Comma-separated list of queues to create on startup.
# Server id. By default, an auto-incremented counter is used.
spring.hornetq.embedded.server-id= 111
spring.hornetq.embedded.topics= # Comma-separated list of topics to create on startup.
spring.hornetq.host=localhost # HornetQ broker host.
# HornetQ deployment mode, auto-detected by default. Can be explicitly set to "native" or "embedded".
spring.hornetq.mode= NATIVE
# HornetQ broker port.
spring.hornetq.port=5445

# JMS (JmsProperties)
spring.jms.jndi-name= # Connection factory JNDI name. When set, takes precedence to others connection factory auto-configurations.
# Acknowledge mode of the container. By default, the listener is transacted with automatic acknowledgment.
spring.jms.listener.acknowledge-mode= AUTO
# Start the container automatically on startup.
spring.jms.listener.auto-startup=true
# Minimum number of concurrent consumers.
spring.jms.listener.concurrency= 111
# Maximum number of concurrent consumers.
spring.jms.listener.max-concurrency= 1223
# Specify if the default destination type is topic.
spring.jms.pub-sub-domain=false

# RABBIT (RabbitProperties)
spring.rabbitmq.addresses= # Comma-separated list of addresses to which the client should connect to.
# Create an AmqpAdmin bean.
spring.rabbitmq.dynamic=true
spring.rabbitmq.host=localhost # RabbitMQ host.
spring.rabbitmq.listener.acknowledge-mode= # Acknowledge mode of container.
# Start the container automatically on startup.
spring.rabbitmq.listener.auto-startup=true
# Minimum number of consumers.
spring.rabbitmq.listener.concurrency= 11113
# Maximum number of consumers.
spring.rabbitmq.listener.max-concurrency= 2321
# Number of messages to be handled in a single request. It should be greater than or equal to the transaction size (if used).
spring.rabbitmq.listener.prefetch= 1111
# Number of messages to be processed in a transaction. For best results it should be less than or equal to the prefetch count.
spring.rabbitmq.listener.transaction-size= 1111
spring.rabbitmq.password= # Login to authenticate against the broker.
# RabbitMQ port.
spring.rabbitmq.port=5672
# Requested heartbeat timeout, in seconds; zero for none.
spring.rabbitmq.requested-heartbeat= 11112
# Enable SSL support.
spring.rabbitmq.ssl.enabled=false
spring.rabbitmq.ssl.key-store= # Path to the key store that holds the SSL certificate.
spring.rabbitmq.ssl.key-store-password= # Password used to access the key store.
spring.rabbitmq.ssl.trust-store= # Trust store that holds SSL certificates.
spring.rabbitmq.ssl.trust-store-password= # Password used to access the trust store.
spring.rabbitmq.username= # Login user to authenticate to the broker.
spring.rabbitmq.virtual-host= # Virtual host to use when connecting to the broker.


# ----------------------------------------
# ACTUATOR PROPERTIES
# ----------------------------------------

# ENDPOINTS (AbstractEndpoint subclasses)
endpoints.enabled=true # Enable endpoints.
endpoints.sensitive= # Default endpoint sensitive setting.
endpoints.actuator.enabled=true # Enable the endpoint.
endpoints.actuator.path= # Endpoint URL path.
endpoints.actuator.sensitive=false # Enable security on the endpoint.
endpoints.autoconfig.enabled= # Enable the endpoint.
endpoints.autoconfig.id= # Endpoint identifier.
endpoints.autoconfig.sensitive= # Mark if the endpoint exposes sensitive information.
endpoints.beans.enabled= # Enable the endpoint.
endpoints.beans.id= # Endpoint identifier.
endpoints.beans.sensitive= # Mark if the endpoint exposes sensitive information.
endpoints.configprops.enabled= # Enable the endpoint.
endpoints.configprops.id= # Endpoint identifier.
endpoints.configprops.keys-to-sanitize=password,secret,key,.*credentials.*,vcap_services # Keys that should be sanitized. Keys can be simple strings that the property ends with or regex expressions.
endpoints.configprops.sensitive= # Mark if the endpoint exposes sensitive information.
endpoints.docs.curies.enabled=false # Enable the curie generation.
endpoints.docs.enabled=true # Enable actuator docs endpoint.
endpoints.docs.path=/docs #
endpoints.docs.sensitive=false #
endpoints.dump.enabled= # Enable the endpoint.
endpoints.dump.id= # Endpoint identifier.
endpoints.dump.sensitive= # Mark if the endpoint exposes sensitive information.
endpoints.env.enabled= # Enable the endpoint.
endpoints.env.id= # Endpoint identifier.
endpoints.env.keys-to-sanitize=password,secret,key,.*credentials.*,vcap_services # Keys that should be sanitized. Keys can be simple strings that the property ends with or regex expressions.
endpoints.env.sensitive= # Mark if the endpoint exposes sensitive information.
endpoints.flyway.enabled= # Enable the endpoint.
endpoints.flyway.id= # Endpoint identifier.
endpoints.flyway.sensitive= # Mark if the endpoint exposes sensitive information.
endpoints.health.enabled= # Enable the endpoint.
endpoints.health.id= # Endpoint identifier.
endpoints.health.mapping.*= # Mapping of health statuses to HttpStatus codes. By default, registered health statuses map to sensible defaults (i.e. UP maps to 200).
endpoints.health.sensitive= # Mark if the endpoint exposes sensitive information.
endpoints.health.time-to-live=1000 # Time to live for cached result, in milliseconds.
endpoints.info.enabled= # Enable the endpoint.
endpoints.info.id= # Endpoint identifier.
endpoints.info.sensitive= # Mark if the endpoint exposes sensitive information.
endpoints.jolokia.enabled=true # Enable Jolokia endpoint.
endpoints.jolokia.path=/jolokia # Endpoint URL path.
endpoints.jolokia.sensitive=true # Enable security on the endpoint.
endpoints.liquibase.enabled= # Enable the endpoint.
endpoints.liquibase.id= # Endpoint identifier.
endpoints.liquibase.sensitive= # Mark if the endpoint exposes sensitive information.
endpoints.logfile.enabled=true # Enable the endpoint.
endpoints.logfile.path=/logfile # Endpoint URL path.
endpoints.logfile.sensitive=true # Enable security on the endpoint.
endpoints.mappings.enabled= # Enable the endpoint.
endpoints.mappings.id= # Endpoint identifier.
endpoints.mappings.sensitive= # Mark if the endpoint exposes sensitive information.
endpoints.metrics.enabled= # Enable the endpoint.
endpoints.metrics.filter.enabled=true # Enable the metrics servlet filter.
endpoints.metrics.id= # Endpoint identifier.
endpoints.metrics.sensitive= # Mark if the endpoint exposes sensitive information.
endpoints.shutdown.enabled= # Enable the endpoint.
endpoints.shutdown.id= # Endpoint identifier.
endpoints.shutdown.sensitive= # Mark if the endpoint exposes sensitive information.
endpoints.trace.enabled= # Enable the endpoint.
endpoints.trace.id= # Endpoint identifier.
endpoints.trace.sensitive= # Mark if the endpoint exposes sensitive information.

# ENDPOINTS CORS CONFIGURATION (EndpointCorsProperties)
endpoints.cors.allow-credentials= # Set whether credentials are supported. When not set, credentials are not supported.
endpoints.cors.allowed-headers= # Comma-separated list of headers to allow in a request. '*' allows all headers.
endpoints.cors.allowed-methods=GET # Comma-separated list of methods to allow. '*' allows all methods.
endpoints.cors.allowed-origins= # Comma-separated list of origins to allow. '*' allows all origins. When not set, CORS support is disabled.
endpoints.cors.exposed-headers= # Comma-separated list of headers to include in a response.
endpoints.cors.max-age=1800 # How long, in seconds, the response from a pre-flight request can be cached by clients.

# JMX ENDPOINT (EndpointMBeanExportProperties)
endpoints.jmx.domain= # JMX domain name. Initialized with the value of 'spring.jmx.default-domain' if set.
endpoints.jmx.enabled=true # Enable JMX export of all endpoints.
endpoints.jmx.static-names= # Additional static properties to append to all ObjectNames of MBeans representing Endpoints.
endpoints.jmx.unique-names=false # Ensure that ObjectNames are modified in case of conflict.

# JOLOKIA (JolokiaProperties)
jolokia.config.*= # See Jolokia manual

# MANAGEMENT HTTP SERVER (ManagementServerProperties)
management.add-application-context-header=true # Add the "X-Application-Context" HTTP header in each response.
management.address= # Network address that the management endpoints should bind to.
management.context-path= # Management endpoint context-path. For instance `/actuator`
management.port= # Management endpoint HTTP port. Use the same port as the application by default.
management.security.enabled=true # Enable security.
management.security.role=ADMIN # Role required to access the management endpoint.
management.security.sessions=stateless # Session creating policy to use (always, never, if_required, stateless).

# HEALTH INDICATORS (previously health.*)
management.health.db.enabled=true # Enable database health check.
management.health.defaults.enabled=true # Enable default health indicators.
management.health.diskspace.enabled=true # Enable disk space health check.
management.health.diskspace.path= # Path used to compute the available disk space.
management.health.diskspace.threshold=0 # Minimum disk space that should be available, in bytes.
management.health.elasticsearch.enabled=true # Enable elasticsearch health check.
management.health.elasticsearch.indices= # Comma-separated index names.
management.health.elasticsearch.response-timeout=100 # The time, in milliseconds, to wait for a response from the cluster.
management.health.jms.enabled=true # Enable JMS health check.
management.health.mail.enabled=true # Enable Mail health check.
management.health.mongo.enabled=true # Enable MongoDB health check.
management.health.rabbit.enabled=true # Enable RabbitMQ health check.
management.health.redis.enabled=true # Enable Redis health check.
management.health.solr.enabled=true # Enable Solr health check.
management.health.status.order=DOWN, OUT_OF_SERVICE, UNKNOWN, UP # Comma-separated list of health statuses in order of severity.